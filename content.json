{"pages":[{"title":"文章分类","text":"","link":"/categories/index.html"},{"title":"down","text":"","link":"/down/index.html"},{"title":"谭立状","text":"个人简述&emsp; &emsp;谭立状，男，1995年1月生，山东潍坊人。2013年考入山东师范大学通信工程专业，获工学学士学位、法学学士学位(辅修)。2017年9月进入北京交通大学下一代互联网互联设备国家工程实验室(NGIID)硕博一体化培养。目前从事数据中心网络、确定性时延网络等方面研究工作。主持完成赛尔网络下一代互联网创新项目1项、北京交通大学研究生创新基金项目2项(结项优秀1项，在研1项)、大学生创新训练项目2项(均结题优秀)；作为学生负责人完成装备发展部技术发展项目1项、军委科技委国防科技创新特区项目1项、中国科学院学部学科发展战略研究项目1项；作为学生负责人负责申报并参与国家重点研发计划子课题2项、荆门市科技研究发展计划项目1项，参加国家自然科学基金项目2项。本科期间参与国家大学生创新训练项目1项(结题优秀)。主笔撰写国防科技报告1份、中科院学科发展咨询报告1份。第一作者发表学术论文6篇，其中SCI检索论文2篇。研究生期间获数学建模竞赛国家二等奖1项、三等奖1项，指导本科生参加数模竞赛获奖多项，本科期间获“创青春”大学生创业计划竞赛全国银奖、数学建模竞赛省一等奖、电子设计竞赛省三等奖、“北斗杯”全国青少年科技创新竞赛二等奖。是IEEE、CCF学生会员，曾任IEEE北京交通大学学生分会学术部部长、2019年度CCF北京交通大学宣传大使。 教育经历 2017.09 至今&emsp;北京交通大学，电子信息工程学院，通信与信息系统，硕博一体化 推荐免试进入下一代互联网互联设备国家工程实验室(NGIID)攻读工学博士学位，导师为苏伟教授。 研究兴趣及内容：数据中心网络(DCN)、一体化标识网络(SINET)及确定性网络(DetNet)等。 主修课程：移动互联网(96)、OFDM移动通信技术(94)、电子与通信专业外语(94)等共32学分。 2014.09 - 2017.06&emsp;山东师范大学，法学院，法学(辅修)，法学学士学位 主修课程：经济法学(98)、刑事诉讼法学(89)、行政诉讼法学(87)、知识产权法(87)学等共70学分。 学士学位论文：《通谋虚伪意思表示研究》，指导教师为王瑞博士。 2013.09 - 2017.06&emsp;山东师范大学，信息科学与工程学院，通信工程，工学学士学位 主修课程：微机原理(99)、通信网原理(98)、网络信息安全(97)、数字图像处理(97)等共165学分。 学士学位论文：《MIMO系统信道容量研究》，指导教师为季辉博士。 综合成绩：3/147，CET-4：530，CET-6：447。 2010.09 - 2013.06&emsp;山东省潍坊第一中学 项目经历 北京交通大学研究生创新基金Ⅱ类资助项目：No.2020YJS013，面向数据中心网络的带内网络遥测任务编排算法研究，1.5万元，2020/03-2022/03，在研，主持 现有带内网络遥测的相关研究多集中于遥测架构和应用上，处于“能测就行”的起步阶段，缺少关于带内网络遥测任务编排策略(INTOP)的系统研究。INTOP 研究如何将服务层的网络状态监控进行拆分、整合成具体的遥测项目，并将这些具体的遥测项目分配到网络中不同的活跃流上，实现遥测数据收集。[Video] CERNET下一代互联网技术创新项目：NGII20180120，基于边缘数据的IPv6网络路由特征及故障预测，10万元，2018/12-2019/12，已结题，主持 提出未知中间网络拓扑情形下基于机器学习的网络路由特征预测及故障预估算法模型。本人作为项目负责人申请并完成该项目，发表EI会议论文2篇，第一作者贡献Python代码300余行开源代码1份，基于SVM、Xgboost、RF等机器学习模型对网络延迟进行回归预测。[Github][Video] 北京交通大学研究生创新基金Ⅰ类资助项目：No.2018YJS002，软件协同流采样及长流检测机制研究，1万元，2018/03-2020/03，已结题(结题获评优秀)，主持 该年度学院范围内唯一硕士获批项目，针对软件定义的数据中心网络，基于Floodlight控制器和Mininet研究可部署的软件协同流采样机制，编写Matlab网络交换机转发及拓扑仿真工具，支持10个交换节点处理流程仿真。首次提出并建模Path-flow matching问题，并给出基于多目标进化算法的求解方法。结项获评优秀(Top 3/22)。作为项目负责人，第一作者发表Trans Emerging Tel Tech论文1篇，GitHub开源代码1份，贡献Matlab代码400行。[Github] 山东师范大学大学生创新训练项目：No.201501259，基于人性化考虑的多目标多路径问题研究，1万元，2015/10-2016/10，已结题(结题获评优秀)，主持 在《智能交通系统中车辆路径优化问题的研究》前期项目的基础上，进一步研究K-Means聚类和AP聚类对于大规模路径求解算法性能的提升效果。结项获评优秀(Top 4/32)。本人负责K-Means聚类算法及遗传算法实现及论文撰写工作，第一作者发表ICNC-FSKD 2016论文1篇。[Github] 国家大学生创新训练项目：No.201410445132，智能交通系统车辆路径优化问题的研究，1万元，2014/10-2015/10，已结题(结题获评优秀)，主持 提出一种基于遗传算法的多目标多路径选择算法,在给定多个目标约束条件下，能够解出多个近优路径满足驾驶员不同偏好的路径选择。结项获评优秀(Top 5/30)。本人负责算法实现及论文撰写，第一作者发表EI会议论文1篇。 国家重点研发计划“宽带通信和新型网络”重点专项子课题：No.2018YFB1800305，一体化融合网络体系结构和关键技术研究，2019/06-2022/06，在研，学生负责人 清华大学牵头，研究一体化融合网络异构多维资源感知技术及基于网络遥测的路由、传输支撑技术，并研制一体化融合网络资源管控原型系统。项目组成员包括3名硕士生。 军委科技委国防科技创新特区项目(涉密项目) ：新型XX网络系统研究与验证，2019/01-2019/10，已结题，学生负责人 中国科学院学部学科发展战略研究项目：未来信息通信网络学科发展战略研究，2018/08-2018/12，已结题，学生负责人 中国科学院学部学科发展战略研究项目：研究信息通信网络技术与学科发展现状，提出对策建议。本人负责分报告二《互联网发展现状及趋势分析》全部内容(261页)及主报告的互联网及网络空间安全等两部分内容的撰写工作，与来自军科院、华为、中兴、电信北研院、信通院、北邮、西电等单位专家交流，深入了解信息通信网络学科各方面内涵。参与中国科学院学部“未来信息通信网络”科学与技术前沿论坛组织工作。 原装备发展部技术基础合同项目(涉密项目)：军用XX网络研究，2017/06-2018/06，已结题，学生负责人 下一代互联网互联设备国家工程实验室项目：广电标识网络应用部署，2018/03-2018/12，已结题，学生负责人 在实验室原973项目基础上针对广电网络设计与实现一体化标识网络。本人负责设计与完成映射查询与发布系统，搭建映射管理系统，撰写开发文档。基于Linux原始套接字贡献C代码500余行，支持基于GeoIP数据库的一体化标识网络接入映射服务器就近分配、映射发布和映射查询解析三个功能，未开源。 国家大学生创新训练项目：No.201510445186，防眩目汽车远光灯系统研究，2015/10-2016/10，已结题(结题获评优秀)，主要完成人 设计实现了一套基于GPS和北斗导航系统的通过调节LED灯通断亮灭与液晶镜片透光遮光频率的汽车防眩目远光灯系统。结项获评优秀(Top 4/32)。本人负责硬件搭建及单片机控制程序编写工作，发表《山东师范大学学报(自然科学版)》论文1篇。成果受邀在中国卫星导航学术年会(CSNC 2016，全球导航领域三大学术年会之一)展示。[Video] 论文发表期刊论文： Tan L, Su W, et al. FindINT: Detect and Locate the Lost In-band Network Telemetry Packet. IEEE Netowkring Letters. 2021: 1-1. Tan L, Su W, Zhang W, et al. In-band network telemetry: A survey. Computer Networks, 2020: 107763. Tan L, Su W(*), Gao S, Miao J, Cheng Y, Cheng P. Path-flow matching: Two-sided matching and multiobjective evolutionary algorithm for traffic scheduling in cloud data center network. Trans Emerging Tel Tech. 2019; e3809. Feng, X., Yang, L., Tan, L. et al. Risk factor analysis of device-related infections: value of re-sampling method on the real-world imbalanced dataset. BMC Med Inform Decis Mak 19, 185. (2019) [Video] [Github] 张超, 谭立状, 姜建鹏,等. 基于北斗导航系统的汽车防眩目远光灯系统的研究[J]. 山东师范大学学报(自然科学版), 2016, 031(003):10-14. 会议论文： Tan L, Su W, Liu Y, Gao X, Zhang W. DCQUIC: Flexible and Reliable Software-defined Data Center Transport, INFOCOM’21 ICCN Workshop. Tan L, Su W, Gao X, Liu Y, Li N, Zhang W. PCM: Proactive Connection Migration in QUIC, MobiQuitous’20. Li M, Su W, Gao S, Tan L Z. Hybrid Cloud Delay Prediction and Anomaly Detection based on GBDT [C]//2019 Int Conf on Networking and Network Applications (NaNA). IEEE, 2019: 196-201. Tan L Z, Su W(*), Gao S, et al. L4S: Low-Speed Software Synergetic Sampling and Detecting Long Flow for Data Center Network[C]//2018 Int Conf on Networking and Network Applications (NaNA). IEEE, 2018: 169-174. Tan L, Tan Y(*), Yun G, et al. Genetic algorithms based on clustering for traveling salesman problems[C]//2016 12th Int Conf on Natural Computation, Fuzzy Systems and Knowledge Discovery (ICNC-FSKD). IEEE, 2016: 103-108. 互联网草案： Tan L, Gao X, Su W, Li N, Zhang W. Connection Migration in QUIC (tan-quic-connection-migration-00) 专业会籍 2018.06至今&emsp;IEEE学生会员(#94085439) 2017年9月至2019年6月，负责IEEE北京交通大学学生分会学术部工作，组织11期“留学经验分享会”及“论文写作分享会”主题沙龙活动。 2018年4月，作为组委会成员参与2018年自研联学术会议组织工作。 2018年5月，作为北京交通大学学生代表参加2018年IEEE中国学生大会(CSC 2018)。 2019年8月，参加第三届“滴滴-IEEE未来精英论坛”。 2018.03至今&emsp;CCF学生会员(#93500G) 2020年10月，参加2020年中国计算机大会(CNCC 2020)。 2018年10月，参加2018年中国计算机大会(CNCC 2018)。 2018年12月至2019年12月，担任CCF北京交通大学宣传大使，负责本校CCF活动宣传工作，获评优秀宣传大使(Top 30/100)。 奖项荣誉&emsp;2020/10&emsp;北京交通大学一等奖学金&emsp;2019/11&emsp;“华为杯”中国研究生数学建模竞赛全国二等奖(队长，7.8%)&emsp;2018/11&emsp;“华为杯”中国研究生数学建模竞赛全国三等奖(队长，14.6%)&emsp;2018/10&emsp;北京交通大学优秀研究生干部&emsp;2017/10&emsp;硕士研究生国家奖学金&emsp;2017/06&emsp;山东省优秀毕业生&emsp;2016/05&emsp;山东省先进班集体&emsp;2016/03&emsp;“北斗杯”全国青少年科技创新竞赛全国二等奖(队长)&emsp;2015/09&emsp;国家励志奖学金&emsp;2015/08&emsp;“瑞萨杯”全国大学生电子设计竞赛山东省三等奖(队长)&emsp;2015/05&emsp;“Mathor Cup”全国大学生数学建模竞赛全国优胜奖(队长)&emsp;2014/12&emsp;山东师范大学首届移动互联网创新大赛一等奖&emsp;2014/09&emsp;“高教社杯”大学生数学建模竞赛山东省一等奖(队长)&emsp;2014/09&emsp;“创青春”全国大学生创业计划竞赛移动互联网专项赛全国银奖&emsp;2014/05&emsp;“创青春”山东省大学生创业大赛铜奖(队长) 实习经历 2019.07-2019.08&emsp;山东凯帝斯工业系统有限公司&emsp;IT系统部 教育部科技发展中心蓝火计划博士生服务团项目。 负责车辆测试路谱数据的拟合表示及控制数据平滑工作。 参与伺服系统控制算法研究。 完成传感器数据降噪的系统设计、降噪算法分析及Python实现。 实现基于LWIP协议栈的Socket通信。 2017.03-2017.06&emsp;山东鲁信科技股份有限公司&emsp;系统部 参与公司网络配置，利用Zabbix绘制公司网络拓扑，实现网络监控功能。 参与鲁信创投(国内A股首家上市创投机构)的混合云业务部署。 个人项目 2020.10-至今&emsp;OpenQUIC TCP的经验告诉我们，通过修补进行协议扩展会导致协议栈变得复杂而脆弱。我们致力于通过标准化QUIC组件（称为OpenQUIC）来加速QUIC的创新性，可扩展性和兼容性。 2018.06-2018.08&emsp;科学图谱 利用Python爬取IEEE Xplore数据库中6000余篇计算机网络研究领域的论文标题、摘要和作者等信息，建立论文间关系检索数据库。 构建基于“HTML-PHP-Redis-Mysql”的学术搜索网站kexuetupu.cn。 实现关键词(标题、作者、关键字)检索、频次统计、主题时间轴等功能。 现已停止开发。 助教助研 2019年春季学期&emsp;《未来互联网综合专题研究课》助教 协助郜帅教授指导本科生完成基于Cisco Packet Tracer的6次计算机网络实验课程(IPv4/v6网络配置、RIP/OSPF动态路由协议、网络安全实验、Socket编程)，总计24课时。 独立编写《未来互联网综合专题研究课实验指南》，共计17个实验65页。 获评北京交通大学优秀助教(Top 20%)。 2018年至今&emsp;本科生毕业设计指导 2020年春季学期，指导2016级本科生刘晓曦完成本科毕设论文《基于网络演算的异构网络串并行传输服务能力等效模型》。 2019年春季学期，指导2015级本科生戈弋完成本科毕业论文《基于LSTM的网络流量趋势预测研究与分析》，获评“校优秀毕业论文”。 2018年春季学期，指导2014级本科生赖威完成本科毕业论文《数据中心网络长流采样与多路径机制研究》。 2016年至今&emsp;本科生数学建模竞赛指导 2016年至今，连续指导山东师范大学和山东女子学院本科生数学建模竞赛，累计16支队伍，共获国家二等奖1项、省一等奖6项及省二等奖4项。 2014年 - 2016年&emsp;本科生科研团队负责人 在山东师范大学担任“分布式计算机软件新技术”山东省重点实验室谭艳艳副教授本科生科研团队负责人，团队共包括7名低年级本科生。 社会工作 2018.06 - 2018.10&emsp;研究生兼职辅导员 负责北京交通大学电信学院研究生暑期夏令营的组织工作。 参与北京交通大学电信学院研究生新生开学迎新工作。 担任电信学院研1804班副班主任，负责班级工作。 2013.09 - 2017.06&emsp;班长 所在班级出色完成学院交付各项工作，多年获评“山东师范大学优秀班集体”，并在2016年5月获评“山东省优秀班集体”(全校十个)。 多次获评“山东师范大学优秀学生干部”、“山东师范大学优秀团干部”、“山东师范大学优秀学生”、“优秀团员”。","link":"/cv/index.html"},{"title":"","text":"","link":"/photos/index.html"}],"posts":[{"title":"INTCollector部署与验证","text":"INTCollector是在ONOS的INT APP基础上拓展的网络监测工具，源码可参考： https://gitlab.com/tunv_ebpf/BPFCollector。 但由于作者的注释及使用说明并不完善，因此在实际部署过程中可能失败率较高。本文详细介绍了基于 INTCollector的带内网络遥测部署与演示过程。 INTCollector是一个用于处理INT遥测报告的高性能收集器，并将数据发送到Prometheus和InfluxDB等数据库服务器（本文以InfluxDB数据库为例说明）。INTCollector支持INT遥测规范v1.0。 基础环境： Ubuntu 18.04（内核版本=v4.15） ONOS（版本号=1.15，作者并未验证其他版本是否支持） Python 2.7, python-pip, mininet, InfluxDB, Grafana, Cython 第一步：部署P4开发环境方法一：可以直接执行/onos/tools/dev/bin/onos-setup-p4-dev一键部署。方法二：根据教程自行部署。 *部署过程极慢，建议北京时间清晨部署或翻墙部署。 第二步：安装BCC （1）下载https://github.com/iovisor/bcc/tree/tag_v0.7.0，重命名文件夹名称为bcc，推荐放在home文件夹下（2）安装llvm-3.9和clang3.9，执行下列命令 sudo apt-get -y install bison build-essential cmake flex git libedit-dev libllvm3.9 llvm-3.9-dev libclang-3.9-dev python zlib1g-dev libelf-dev 安装完成后，执行下列命令补充clang sudo apt install clang-3.9 （3）完成llvm-3.9和clang3.9，执行下列命令 mkdir bcc/build; cd bcc/build cmake .. -DCMAKE_INSTALL_PREFIX=/usr make sudo make install *参考资料：https://github.com/iovisor/bcc，需要安装旧版本，如0.7 第三步：下载BPFCollector git clone https://gitlab.com/tunv_ebpf/BPFCollector.git cd BPFCollector git checkout -t origin/spec_1.0 第四步：配置并测试（1）依次执行 sudo sysctl net/core/bpf_jit_enable=1 pip install Cython #为收集器添加虚拟接口： sudo ip link add veth_1 type veth peer name veth_2 sudo ip link set dev veth_1 up sudo ip link set dev veth_2 up （2）在/BPFCollector文件夹中运行 sudo pip install pytest sudo python -m pytest 可以验证Python环境对InfluxDB和网口的支持情况。 若结果显示： ============================= test session starts ============================== platform linux2 -- Python 2.7.17, pytest-4.6.11, py-1.8.2, pluggy-0.13.1 rootdir: /home/john/BPFCollector collected 2 items test_e2e.py .. [100%] ========================== 2 passed in 20.29 seconds =========================== 则表示通过检查。 第四步：配置INT环境修改拓扑，找到$ONOS_ROOT/tools/test/topos/bmv2-demo.py （1）将from mininet.link import TCLink替换为from mininet.link import TCLink, Intf（2）在net.build()后另起一行插入collectorIntf = Intf( ‘veth_1’, node=net.nameToNode[ “s12” ] ) *注意虚拟网卡编号veth_1 第五步：启动ONOS和Mininet （1）打开新终端1(启动ONOS控制器)： #自定义ONOS的环境变量 export ONOS_ROOT=~/onos source $ONOS_ROOT/tools/dev/bash_profile #起ONOS应用，起ONOS控制器 cd onos ONOS_APPS=drivers.bmv2,proxyarp,lldpprovider,hostprovider,fwd bazel run onos-local -- clean （2）打开新终端2： cd onos ./tools/test/bin/onos localhost #激活gui和INT应用 app activate org.onosproject.gui app activate org.onosproject.inbandtelemetry ONOS Web UI登陆地址：http://localhost:8181/onos/ui，默认用户名密码：karaf。 （3）打开新终端3(启动Mininet): #运行Mininet sudo mn -c sudo -E $ONOS_ROOT/tools/test/topos/bmv2-demo.py --onos-ip=127.0.0.1 --pipeconf-id=org.onosproject.pipelines.int （4）打开新终端4: simple_switch_CLI --thrift-port `cat /tmp/bmv2-s12-thrift-port` RuntimeCmd: mirroring_add 500 4 *最后一个参数4代表虚拟网卡veth_1在mininet中s12交换机上的端口编号，本例中为4，也可能是其他数字，根据实际情况配置 第六步：配置遥测参数 在ONOS Web中配置INT服务器和遥测参数:（1）遥测服务器IPv4地址为127.0.0.1，端口号为54321，并应用。（2）配置流IP地址和端口号，根据实际情况来，iperf UDP选5001端口。其中遥测项目必选Switch Id和Egress timestamp，其他可选。（3）生成流量: 在mininet中执行 h1 iperf -c h2 -u -t 10000 生成流量。 第七步：打开收集器 sudo systemctl start influxdb sudo python BPFCollector/InDBClient.py veth_2 第八步：查看遥测结果 打开Grafana，地址为http://localhost:3000配置Grafana的步骤可以自行百度。可以通过Influxdb客户端查看数据库INTdatabase里的数据表名称，绑定到Grafana上。 最终效果可以参看[视频演示] 常见故障解决： 运行Mininet提示Exception: Error creating interface pair (s11-eth1,s21-eth1): RTNETLINK answ解决方案：运行sudo mn -c彻底清除历史拓扑信息 运行Mininet提示新建交换机超时提示Exception: Switch did not start before timeout解决方案：查看ONOS是否正常起来，一般是ONOS启动失败，重启ONOS即可。 未经允许，不可转载。","link":"/2020/05/29/20200529intcollector/"},{"title":"Ubuntu 18.04安装Mininet","text":"sudo apt-get install git //安装git，安装过可以跳过 git clone git://github.com/mininet/mininet //从github上拷贝下仓库 cd mininet//进入mininet目录 cat INSTALL util/install.sh -a //-a是默认安装在home目录下 安装完成后，可以看到Enjoy Mininet的提示，代表安装成功。 安装完成后，可以执行 sudo mn --test pingall 看到测试结果则表示正常。 注意事项：storage.googleapis.com抽得厉害，国内访问时常失败。最好在Ubuntu APT源下执行安装命令，对APT换国内源的操作可能会影响安装。","link":"/2020/06/01/20200601mininet/"},{"title":"&#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives空间不足解决办法","text":"Ubuntu系统在硬盘较小的情况下，用户多次执行apt-get install会导致/var/cache/apt/archives缓存过多数量的应用安装包，造成/var/cache/apt/archives空间不足。在下次执行新的apt-get install命令时会提示 Need to get 2,478 MB of archives. After this operation, 4,716 MB of additional disk space will be used. E: You don't have enough free space in /var/cache/apt/archives/. 对此问题的解决办法可以有如下几种： （1）本身Ubuntu主机硬盘较大，仅因为缓存过多导致空间不足。解决办法： 清除所有已下载的过期安装包 sudo apt-get autoclean 清除所有已下载的安装包 sudo apt-get clean 在某个空间大的分区建立一个目录，然后把/var/cache/apt/archives换成指向那个目录的软链接 mkdir -p &quot;$HOME/debs/partial&quot; sudo rm -rf /var/cache/apt/archives sudo ln -s &quot;$HOME/debs&quot; /var/cache/apt/archives （2）虚拟机环境下Ubuntu主机硬盘较小，清理缓存仍空间不足。解决办法：在虚拟机软件中增加Ubuntu主机硬盘空间，并在Ubuntu Disks中增大实际使用的硬盘大小。","link":"/2020/05/29/var-cache-apt-archives/"},{"title":"Ubuntu 18.04部署ONOS+BMv2教程","text":"最新版本的ONOS对Ubuntu16等旧版本的支持并不友好，因此推荐大家在Ubuntu18上安装ONOS和P4。 发现关于Ubuntu 18.04部署ONOS+BMv2的资料比较少，笔者找了网上的一些教程，比较推荐的方案有两个： （1）方法一： ONOS安装：https://wiki.onosproject.org/display/ONOS/Developer+Quick+Start BMv2安装：https://www.cnblogs.com/pullself/p/10341891.html （2）方法二： 使用https://wiki.onosproject.org/pages/viewpage.action?pageId=13994261 中的VM镜像 强烈建议北京时间早上安装，速度快！强烈建议大内存（6G以上，建议10G）！ 遇到的常见问题： （1）bazel安装国外源连接不上 选择官方教程（ https://docs.bazel.build/versions/master/install-ubuntu.html ）中的第二种源码安装的方案解决。 （2）报错error: RPC failed; curl 18 transfer closed with outstanding read data remaining 解决方法：选择网络状态好的时候安装，并且修改缓存大小，执行git config –global http.postBuffer 1524288000后重新git clone。","link":"/2020/05/29/20200529/"},{"title":"ONOS构建过程中遇到MVN中央仓库HTTPS 501错误解决方法","text":"在使用Bazel构建ONOS的过程中，一般都会遇到如下错误： ERROR: /home/john/onos/utils/osgi/BUILD:3:1: no such package '@com_google_code_findbugs_jsr305//jar': java.io.IOException: Error downloading [http:// repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar] to /home/ john/.cache/bazel/_bazel_john/dc3e918e7961130901a9f8f2d940ea2a/external/ com_google_code_findbugs_jsr305/jsr305-3.0.2.jar: GET returned 501 HTTPS Required and referenced by '//utils/osgi:onlab-osgi' ERROR: Analysis of target '//:onos' failed; build aborted: no such package '@com_google_code_findbugs_jsr305//jar': java.io.IOException: Error downloading [http:// repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar] to /home/ john/.cache/bazel/_bazel_john/dc3e918e7961130901a9f8f2d940ea2a/external/ com_google_code_findbugs_jsr305/jsr305-3.0.2.jar: GET returned 501 HTTPS Required 这个错误产生的原因是从2020年1月15日开始，Maven中央存储库不再支持通过纯HTTP进行的不安全通信，并且要求对存储库的所有请求都通过HTTPS进行加密。 官方解决方案是：如果收到此错误，则需要用其规范的HTTPS对应项替换所有对Maven Central的URL引用：将http://repo.maven.apache.org/maven2/ 替换为 https://repo.maven.apache.org/maven2/ 但是，我们是使用Bazel而非Maven，没有中央仓库的配置文件，也很难找到项目中的配置文件。 事实上，ONOS项目中对Maven中央仓库引用的配置文件是generate_test_rules.bzl这个文件的位置是onos/tools/build/bazel/generate_test_rules.bzl 只需要修改这个配置文件中的http://repo.maven为https://repo.maven即可解决。","link":"/2020/06/17/20200617onoserror/"},{"title":"带内网络遥测技术小结","text":"随着业务应用的推陈出新和用户规模的不断增长，网络呈现出“高速率、大规模、多接入、不可预期”的特点。传统网络管控方式和手段已经难以解决现有网络和未来网络的挑战。 因此，网络管理者迫切需要颠覆传统网络监测及故障排除方法，提出能够应对网络状态测量、网络失效检测、故障定位与恢复等场景用例的实时灵活的测量解决方案。 P4开创了数据平面可编程的新时代，这为网络管控提供了从数据平面直接获取状态信息的崭新途径。数据平面可编程技术的平台无关、协议无关和可重构性使网络管理者可以重塑网络测量及网络管控流程。 本文首发链接：https://www.sdnlab.com/23822.html 1 传统网络测量网络测量是网络管控的基础手段和数据来源。按照测量方式的不同，传统意义上的网络测量（Network Measurement）可以分为主动测量（Active Measurement）、被动测量（Passive Measurement）和混合测量（Hybrid Measurement）。 主动测量通过向网络中主动发送探测分组，并根据探测分组受网络影响而发生的特性变化来分析网络行为。被测量的网络性能指标通常是丢包率、延迟、抖动、TTL和带宽等。常见的主动测量协议包括PING、Traceroute、IP测量协议（IP Measurement Protocol，IPMP）、单向主动测量协议（One-Way Active Measurement Protocol，OWAMP）、双向主动测量协议（Two-Way Active Measurement Protocol，TWAMP）、MPLS丢包/延迟测量协议（MPLS L/DM Protocol）等。 主动测量的优点是使用灵活，缺点是给网络增加额外带宽/处理开销，往往会引起海森堡效应（Heisenberg effect），即观察者的介入干扰测量结果。 被动测量通过捕获流经测量点的分组来测量网络状态、流量特征和性能参数。被动测量使用控制平面消息即可监测网络流量状态性能，被监测的性能指标通常是包/字节统计值、协议类型、队列长度和延迟统计信息。常见的被动测量协议有网络数据流统计协议（Cisco Netflow）、sFlow、IP流量信息输出协议（IPFIX）、数据包采样协议（PSAMP）。 被动测量不会产生额外的测量负载，因此不会影响网络本身特性。但被动测量往往只能监测交换节点本地状态信息，而不能监测网络状态和丢包率等全局状态信息。 混合测量通过灵活组合主/被动测量方法，或结合主/被动测量优点重新设计测量机制的方式，对网络进行协同测量。典型代表有反应式测量（Reactive Measurement）、带内测量（In-band Measurement）和交替标记性能测量（Alternate Marking-Performance Measurement，AM-PM）。 表1 网络测量方案及其分类 分类 常见协议或方案 主动测量 PING、Traceroute、Iperf、IPMP、OWAMP、TWAMP、MPLS L/DM、Pingmesh等 被动测量 Netflow、sFlow、IPFIX、PSAMP等 混合测量 Reactive Measurement、In-band Measurement、AM-PM、Postcard Based Telemetry、In-band Flow Analyzer、Hybrid Two Steps等 带内测量是近几年兴起的一种混合测量方法，通过路径中间交换节点对数据包依次插入元数据（Measure metadata）的方式完成网络状态采集。相较于传统网络测量方案，带内测量能够对网络拓扑、网络性能和网络流量实现更细粒度的测量。目前，带内测量的研究方向主要为IETF IPPM工作组[1]和OPSA工作组主导的带内OAM（In-situ Operation Administration and Maintenance，IOAM)和P4联盟主导的带内网络遥测（In-band Network Telemetry，INT)。 2 带内网络遥测 带内网络遥测由Barefoot、Arista、Dell、Intel和VMware于2015年共同提出，是一种不需要网络控制平面干预，网络数据平面收集和报告网络状态的框架。在带内网络遥测架构中，交换设备转发处理携带遥测指令（Telemetry instructions）的数据包。当遥测数据包经过该设备时，这些遥测指令告诉具备网络遥测功能的网络设备应该收集并写入何种网络状态信息。 带内网络遥测系统由遥测服务器和具备带内网络遥测功能的交换机组成。根据实际遥测任务的需要，该系统还可能需要时间同步服务器等设备完成辅助工作。 带内网络遥测的数据包处理流程如下： 普通数据报文到达带内网络遥测系统的第一个交换节点时，带内网络遥测模块通过 在交换机上设置的采样方式匹配并镜像出该报文，根据遥测任务的需要在四层头部后插入INT头部，将INT头部所指定的遥测信息封装成元数据（MetaData，MD）插入到INT头部之后；报文转发到中间节点时，设备匹配INT头部后插入MD；报文转发到带内网络遥测系统最后一跳时，交换设备匹配INT头部插入最后一个MD并提取全部遥测信息并通过gRPC等方式转发到遥测服务器。遥测服务器解析遥测报文内的遥测信息，上报给上层遥测应用程序。 既有方案一：P4-based INT 基于P4实现的带内网络遥测（P4-based INT）是最早的带内网络遥测实现方案。P4-based INT包括两种实体：INT traffic sources和INT traffic sinks。INT traffic sources负责将遥测指令嵌入到正常数据包或遥测数据包中。INT traffic sinks对遥测结果进行提取和上报。INT traffic sources和INT traffic sinks可以是应用、终端网络协议栈、网管程序、NIC、发送侧/接收侧ToR交换机等。 随着逐跳增加INT元数据，遥测数据包大小逐渐增加，这可能导致数据包大小超过链路MTU值。P4-based INT给出了两种解决方案：（1）根据INT跳数及逐跳元数据长度适当增大链路MTU配置值；（2）根据三层路径MTU发现机制确定逐跳链路MTU，中间节点根据遥测数据包长度选择是否插入遥测数据。 既有方案二：INT in 6TiSCH Abdulkadir Karaagac等人将带内网络遥测从有线网络拓展到无线网络场景中[4]，针对工业无线传感器网络提出了一种带内网络遥测方案INT in 6TiSCH。该方案以最小化资源消耗和通信开销作为设计目标，能够处理6TiSCH网络功能异常监测、拥塞控制、集中路由和调度管理等场景和用例。 INT in 6TiSCH在IEEE 802.15.4 MAC帧中Information Elements（IEs）字段插入遥测数据。遥测报文由三部分组成：IEs Subtype ID、INT Header及INT Content。 其中，INT Header由三部分组成：INT Control header（8 bits）、Sequence Number（8 bits）及Bitmap（8 bits）。INT Control header用于定义遥测模式及遥测功能。Sequence Number用于区分来自同一节点的不同INT遥测数据。Bitmap中每个bit位代表一种预定义的遥测数据。 值得注意的是，INT Control header中的HBH Mode（2 bits）定义了三种遥测模式，当Mode=00时，中间节点全部遥测；当Mode=10时，中间节点将随机添加遥测数据；当Mode=01时，中间节点根据上一次添加遥测数据的时间、转发帧长度及剩余跳数计算概率值，并依据概率值进行遥测数据添加。HBH Mode在一定程度上能够降低带内网络遥测的带宽开销。 Bitmap Mode定义了两种位图模式：内容位图（Content Bitmap）和节点位图（Node Bitmap）。内容位图模式下，中间节点将依据Bitmap字段的遥测组合进行遥测数据的添加。节点位图模式下，中间节点允许自行添加位图及INT数据。 INT in 6TiSCH定义的遥测数据模型包括：Node ID（2 Byte）、Receive Channel &amp; Timestamp（2 Byte）、Utilization indicator（1 Byte）、RSSI（1 Byte）及其他保留信息类型。 既有方案三：NetVision Zhengzheng Liu等人提出了网络遥测即服务的概念[5]，并设计了带内网络遥测平台NetVision。NetVision主动发送与网络状态和遥测任务相匹配的适当数量和格式的探针数据包，降低了遥测开销，提高了网络遥测的覆盖性和可扩展性。在路径规划方面，NetVision采用段路由进行简单灵活的路由控制，通过更改SR标签的方式定制探测路径。 为了降低网络管理员部署带内网络遥测的难度，NetVision设计了一套包括遥测元数据和查询原语在内的遥测原语，并封装为遥测服务API，可以对外提供端到端延迟测量、实时包传输速率计算、链路/节点包黑洞发现等功能。 NetVision探针为“SR+INT”双栈结构，SR Stack包括SR列表长度和输出端口标签，INT Stack包括标签列表长度和遥测标签列表。路由器通过弹出SR标签并放入INT标签完成一次遥测转发。 既有方案四：INTCollector INTCollector是一种针对带内网络遥测计算及数据存储开销大的问题而设计的从带内网络遥测原始数据中提取并过滤重要网络信息的机制[6]。INTCollector只过滤诸如新流到达或逐跳延迟剧烈变化等重要网络事件，并将重要网络时间存储在时间序列数据库中，从而降低CPU使用率和存储成本。INTCollector为INT信息处理设计了快慢两条通道，快通道用于处理INT报告数据包，慢通道用于处理重要事件并将其存储到数据库中。实验结果表明，INTCollector机制可以将带内网络遥测存储数据量减少2-3个数量级，并降低遥测服务器负载。 综上所述，带内网络遥测是一种随路测量方案。因此，带内网络遥测存在一些固有的缺点。首先，带内网络遥测检测范围有限，预先定义的随路检测特性使得带内网络遥测往往无法及时获得全网全状态的网络视图。因此带内网络遥测只能监测特定路径上的某些数据包的遥测数据。其次，由于将遥测指令和数据封装到正常数据包中，正常数据包的有效载荷比降低，遥测开销较大。最后，遥测指令和数据的构造、封装、填充和提取等环境增加了交换机处理负担。 值得注意的是，与带内网络遥测相对应的是带外网络遥测（Out-band Network Telemetry，ONT）。带外网络遥测通过监控设备单独发送探测报文，收集链路状态信息。探测报文与网络业务无关，因此测量结果并不准确。带外网络遥测与带内网络遥测的遥测数据包生成、接收处理流程不同，对网络本身产生的影响和测量精度也不相同。严格来说，带外网络遥测应属于主动遥测的范畴。 传统网络测量技术因其静态、低效、开销大等缺陷，在网络状态监测与管理上存在精度和时效性等性能问题。因此，带内网络遥测系统亟需解决以下几个技术需求： 性能：带内网络遥测系统应能根据遥测需求，快速生成并下发遥测方案，上报网络状态信息。 可拓展性：带内网络遥测系统应能够应对未来网络异质化和高速化挑战，满足各类服务的遥测需求。 轻量级：有限的网络资源导致网络带内网络遥测系统必须是轻量级的，以减少资源消耗和通信开销。 鲁棒性：网络遥测系统应该能够应对网络节点或链路故障，不依赖于特定的遥测服务器或网络节点进行部署，并且能够适应网络状态频繁变化。 安全性：对用户数据包的遥测操作可能伴随着用户隐私泄露和安全风险问题。因此，带内网络遥测需要研究如何通过技术手段减少对用户数据的影响。 3 带内网络遥测应用带内网络遥测技术的应用范围已经从最初的网络运维可视化、故障定位拓展到了网络测量、拥塞控制、路径决策、流量工程和网络数据平面验证等领域。 3.1 网络测量为了满足网络运行、维护和安全的需要，控制平面需要实时获取网络流量状态。网络查询成为日渐兴起的研究领域。常见的网络查询包括：大小流检测、异常流量检测等。 现有遥测系统可以实时收集和分析测量数据，但存在两个普遍问题：（1）仅支持单一遥测任务；（2）处理和存储开销随流量及查询量增加而增大。 学术界的研究人员也关注到了上面的问题，Arpit Gupta等人针对遥测提供了一个声明式接口，可以满足11种遥测任务的查询需求[7]。这11种遥测任务包括：TCP新建连接查询、Slowloris DOS攻击查询、Zorro Attacks查询、SSH暴力破解攻击查询、Superspreader、端口扫描查询、DDoS攻击查询、TCP SYN Flood攻击查询、TCP Incomplete Flows查询、DNS Tunneling检测查询、DNS反向攻击查询。 网络状态测量也是带内网络遥测在产业应用方面最为典型的场景。Barefoot 推出的Deep Insight是全球首个可以运行在商业级服务器上的提供逐包状态监测的网络系统，能够实时解释、分析和定位数据包延迟发生的原因和位置[8]。结合机器学习技术，Barefoot Deep Insight可以在纳秒级分辨率上实现对网络性能的有状态自动化异常监测。 3.2 微突发检测微突发（Microbursts）是指端口在非常短的时间（毫秒级别）内收到非常多的突发数据，以至于瞬时突发速率达到平均速率的数十倍、数百倍，甚至超过端口带宽的现象。受限于秒级流量监控周期的技术局限性，SNMP协议或网络性能检测工具很难采集毫秒级的微突发流量。带内网络遥测通过在数据包转发时刻记录交换机队列长度的方式便可以轻松检测网络微突发程度。 3.3 故障快照由于网络遥测通过端口计数器、数据包采样和hop-by-hop带内遥测等方式提取网络状态数据，因此会产生大量的遥测数据。由于这类遥测数据缺乏关于异常网络行为的上下文状态和可操作信息，网络管理员不得不采用各类状态监测工具进行长时间的巨量数据分析，才能找到网络问题的根本原因。针对这一问题，Mellanox提出故障快照 (What Just Happened，WJH)技术。 故障快照技术利用Mellanox Spectrum™和Spectrum™-2以太网交换机芯片，以T-比特级别的速率检测所有端口上的数据包，然后识别异常行为，并将其整合为简洁、具体且可操作的数据，从而简化网络故障排除和快速恢复。 3.4 拥塞控制网络源端可以利用带内网络遥测提供的丰富的网络状态信息进行拥塞避免和控制。 速率控制协议（Rate Control Protocol，RCP）通过调整链路容量分配进行拥塞控制。网络中的每个RCP路由器根据入口链路利用率、平均队列长度、流平均RTT等网络状态参数周期性计算每条链路上的公平共享速率（Fair-share rate）。 RCP是在RCP基础上设计的针对个流状态统计的拥塞控制方案。RCP在终端主机上针对每个流部署速率限制器和速率控制器。网络控制平面为每个流分配AppSpecific_0和AppSpecific_1两个内存地址存储公平速率。其中，AppSpecific_0储存当前公平速率版本号，AppSpecific_1存储真正的公平速率。每个流的速率控制器周期性通过“收集-计算-更新”三个阶段查询和更新网络状态。 在收集阶段，速率控制器以毫秒为周期统计逐跳交换机ID、队列长度、链路利用率和链路公平共享率（即AppSpecific_0值和AppSpecific_1值）。 在计算阶段，发送方速率控制器根据收集信息计算延路每条链路的平均队列长度，然后使用RCP拥塞控制算法计算每条链路的公平共享速率 。 在更新阶段，每个流的速率控制器异步更新所有链路上的公平共享速率。 由于RCP在每个RTT周期内发送一次公平速率调整遥测数据包，因此RCP的开销与TCP相似。值得注意的是，RCP*的CSTORE指令在遥测基础上增加了向交换机“写数据”的操作，开辟了一种新的拥塞控制方案。 3.5 路由决策网络遥测为路由决策提供了除网络连接、网络跳数以外的更多、更详细的网络状态参数，例如链路时延、丢包率、网络拥塞情况和链路利用率等。因此，基于这些网络状态参数，结合Segement Route等新型路由方式，网络节点可以制定个性化的性能路由。 3.6 流量工程在运行多路径路由协议的数据中心网络中，终端主机允许根据数据包头部值选择路由路径。以VLAN标签为例，终端主机通过改变VLAN ID值选择不同的转发路径。 Vimalkumar Jeyakumar等人在设计了一种基于带内网络遥测的负载均衡方案[11]。终端主机在其发出的数据包中插入由路径VLAN ID、链路利用率TX-Utilization、链路发送字节数TX-Bytes构成的遥测指令。其中，设置链路发送字节数字段的目的是在链路利用率没有更新的情况下评估路径拥塞程度。 接收方在收到遥测数据包后回传给发送方。发送方根据遥测字段信息构建“路径-拥塞程度”的映射表。其中拥塞程度可以用逐跳链路利用率最大值或总和表示。发送方根据拥塞程度映射表选择合适路径进行转发。 3.7 网络智慧化限制网络智慧化部署的瓶颈除了算力算法问题，实时数据供给也是一大挑战。而带内网络遥测恰恰能够为网络智慧化方案的部署提供源源不断的实时网络状态数据。 4 未来展望带内网络遥测已经得到了学术界和产业界的广泛关注。学术界更加关注带内网络遥测能否给网络闭环控制带来新的解决思路，产业界已经有成熟的网络监管产品问世。带内网络遥测技术方兴未艾，但也面临着一些挑战。 4.1 通用遥测模型带内网络遥测具有数据平面可编程、随路测量、可重配置等特点。如何利用这些特点破解传统测量无法被普遍适用的局面，对完善网络遥测研究具有重要意义。目前学术界和产业界缺乏针对一体化融合网络互联互通场景的通用遥测模型的研究。利用可编程数据平面的灵活性和可扩展性针对异构网络特性设计随路遥测方案，形成统一网络状态视图成为带内网络遥测技术的潜在应用场景。 4.2 性能损失评估带内网络遥测可以插入数据包中的遥测元数据数量受数据包原始大小及网络最大传输单元（MTU）的限制。这也意味着带内网络遥测侵占部分网络带宽。除此之外，带内网络遥测支持VXLAN-GPE、Geneve、NSH、TCP和UDP等多种封装协议。这些封装协议大多包含头部校验过程。因此，元测量数据的插入需要更新校验和字段，这将会增加交换机的处理开销。目前，学术界缺少关于带内网络遥测对网络性能损失产生的影响评估研究。 4.3 个流数据分析相较于其他测量方案，带内网络遥测可以捕捉更为详尽的个流网络状态信息（如网络流逐跳延迟、逐跳缓存大小、多路径传输的子路径特性等）。这些个流网络状态信息的是传统测量方案无法获取或未曾研究的。如何针对个流建立准确的统计分析模型（如时间序列分析、回归分析、关联分析等）并基于这些模型设计部署网络管理、优化方案成为未来带内网络遥测研究的重要任务。 4.4 遥测数据聚合首先，带内网络遥测可能会产生大量遥测数据，除了占据网络带宽以外，还加重了服务器数据收集、存储和分析负担。假如网络所有节点转发的所有流量都进行带内网络遥测，一个节点将为每个数据包添加几十个字节的遥测数据，数据包在整个转发路径可能会累计大量跟踪数据，这些累计跟踪数据甚至可能会超过原始数据包的大小。数据平面汇聚产生的遥测数据量与遥测元数据量、流量规模、网络规模等有关。遥测服务器如何处理规模庞大的遥测数据是遥测系统性能衡量的关键环节。因此，遥测终点在汇报遥测数据时，应考虑对遥测数据进行预先压缩、筛选和聚合处理，以减少遥测服务器压力。 其次，现有状态采集字段只能存放一些必不可少的有限数据。随着网络自动化技术、虚拟化技术、网络融合、分组光纤融合的发展趋势，带内网络遥测要按需并可交互地采集并提供更多网络数据。因此，未来带内网络遥测技术的研究需要充分考虑数据字段的定义、聚合、获取和过滤的灵活性和可扩展性。 最后，现有遥测原语（primitives）和模型过于复杂，带内网络遥测需要对遥测数据（如节点、链路、端口、路径、流、时间戳等）查询原语进行简化。 4.5 遥测安全风险带内网络遥测的数据平面可编程性导致潜在的软件漏洞、后门、病毒带来安全问题。带内网络遥测伴随着对网络数据包的查看、插入、封装等包级操作。这些操作给用户信息的保密和安全带来一定威胁。除此之外，恶意INT Source通过不断构造遥测数据包，侵占网络带宽，消耗中间节点处理能力，也可能会造成网络可用资源枯竭的情况。因此，带内网络遥测系统中的节点认证与鉴权方案亟需研究。 5 参考文献/资料[1] https://datatracker.ietf.org/wg/ippm/documents/[2] Kim C, Sivaraman A, Katta N, et al. In-band network telemetry via programmable dataplanes[C]//ACM SIGCOMM. 2015.[3] https://p4.org/assets/INT-current-spec.pdf[4] Karaagac A, De Poorter E, Hoebeke J. In-Band Network Telemetry in Industrial Wireless Sensor Networks[J]. IEEE Transactions on Network and Service Management, 2019.[5] 刘争争, 毕军, 周禹, et al. 基于P4的主动网络遥测机制[J]. 通信学报, 2018, 39(S1):168-175.[6] Tu N V , Hyun J , Kim G Y , et al. INTCollector: A High-performance Collector for In-band Network Telemetry[C]// 2018 14th International Conference on Network and Service Management (CNSM). IEEE Computer Society, 2018.[7] Gupta A, Harrison R, Canini M, et al. Sonata: Query-driven streaming network telemetry[C]//Proceedings of the 2018 Conference of the ACM Special Interest Group on Data Communication. ACM, 2018: 357-371.[8] https://barefootnetworks.com/static/app/pdf/DI-UG42-003ea-ProdBrief.pdf[9] https://support.huawei.com/enterprise/zh/doc/EDOC1100059517/46d2dd1d[10] https://www.mellanox.com/related-docs/solutions/SB_Mellanox_WJH.pdf[11] Jeyakumar V, Alizadeh M, Geng Y, et al. Millions of little minions: Using packets for low latency network programming and visibility[C]//ACM SIGCOMM Computer Communication Review. ACM, 2014, 44(4): 3-14.","link":"/2020/05/29/20200527int/"}],"tags":[{"name":"ONOS","slug":"ONOS","link":"/tags/ONOS/"},{"name":"P4","slug":"P4","link":"/tags/P4/"},{"name":"INT","slug":"INT","link":"/tags/INT/"},{"name":"Ubuntu","slug":"Ubuntu","link":"/tags/Ubuntu/"}],"categories":[{"name":"ONOS","slug":"ONOS","link":"/categories/ONOS/"},{"name":"P4","slug":"P4","link":"/categories/P4/"},{"name":"P4","slug":"ONOS/P4","link":"/categories/ONOS/P4/"},{"name":"INT","slug":"P4/INT","link":"/categories/P4/INT/"},{"name":"INT","slug":"ONOS/P4/INT","link":"/categories/ONOS/P4/INT/"}]}